{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c59ba8bf-da82-4ca0-8b42-9406484c32e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import librosa\n",
    "import math\n",
    "import json\n",
    "\n",
    "DATASET_PATH = 'Data/genres_original'\n",
    "JSON_PATH = 'Data/data.json' # json path to dump the mfcc segmented data from 'data' dictionary\n",
    "SAMPLE_RATE = 22050\n",
    "DURATION = 30 # measured by seconds\n",
    "SAMPLES_PER_TRACK = SAMPLE RATE * DURATION\n",
    "\n",
    "def save_mfcc(dataset_path, json_path, n_mfcc=13, n_fft=2048, hop_length=512, num_segments=5):\n",
    "    # dictionary to store data\n",
    "    data = {\n",
    "        # map the differenct genre labels onto numbers\n",
    "        \"mapping\": [],\n",
    "        # mfcc vectors for each segment\n",
    "        \"mfcc\": [],\n",
    "        # the outputs we expect for each segment\n",
    "        \"labels\": []\n",
    "    }\n",
    "    \n",
    "    num_samples_per_segment = int(SAMPLES_PER_TRACK / num_segments)\n",
    "    expected_num_mfcc_vectors_per_segment = math.ceil(num_samples_per_segment / hop_length) # 1.2 -> 2, making a ceiling\n",
    "    \n",
    "    # loop through all of the genres\n",
    "    for i, (dirpath, dirnames, filenames) in enumerate(os.walk(dataset_path)):\n",
    "        \n",
    "        # ensure that we're not at the root level\n",
    "        if dirpath is not dataset_path:\n",
    "            \n",
    "            # save the semantic label (save mappings like 'classical','blues' etc.)\n",
    "            dirpath_components = dirpath.split('/') # genre/blues => [\"genre\",\"blues\"]\n",
    "            semantic_label = dirpath_components[-1]\n",
    "            data['mapping'].append(semantic_label)\n",
    "            print(\"\\nProcessing {}\".format(semantic_label))\n",
    "            \n",
    "            # process files for a specific genre\n",
    "            for f in filenames:\n",
    "                \n",
    "                # load audio file\n",
    "                file_path = os.path.join(dirpath, f)\n",
    "                signal, sr = librosa.load(librosa.util.example_audio_file(), sr=SAMPLE_RATE, duration=DURATION)\n",
    "                # process segments extracting mfcc and storing the data\n",
    "                # s = segment\n",
    "                for s in range(num_segments):\n",
    "                    start_sample = num_samples_per_segment * s # s=0 -> 0\n",
    "                    finish_sample = start_sample + num_samples_per_segment # s=0 -> num_samples_per_segment\n",
    "                        \n",
    "                    mfcc = librosa.feature.mfcc(signal[start_sample:finish_sample],\n",
    "                                               sr=sr,\n",
    "                                               n_mfcc=n_mfcc,\n",
    "                                               n_fft=n_fft,\n",
    "                                               hop_length=hop_length)\n",
    "                    \n",
    "                    mfcc = mfcc.T\n",
    "                    \n",
    "                    # store mfcc and label for each segment if it has the expected length\n",
    "                    if len(mfcc) == expected_num_mfcc_vectors_per_segment:\n",
    "                        data['mfcc'].append(mfcc.tolist())\n",
    "                        data['labels'].append(i-1)\n",
    "                        print('{}, segment:{}'.format(file_path, s))\n",
    "                        \n",
    "    with open(json_path, \"w\") as fp:\n",
    "        json.dump(data, fp, indent=4)\n",
    "        \n",
    "if __name__==\"__main__\":\n",
    "    save_mfcc(DATASET_PATH, JSON_PATH, num_segments=25)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
